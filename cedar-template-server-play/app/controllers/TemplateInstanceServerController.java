package controllers;

import com.fasterxml.jackson.databind.JsonNode;
import org.metadatacenter.server.service.FieldNameInEx;
import org.metadatacenter.server.service.TemplateInstanceService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import play.libs.Json;
import play.mvc.Controller;
import play.mvc.Result;
import utils.JsonUtils;
import utils.ServiceResponseObject;

import javax.management.InstanceNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplateInstanceServerController extends GenericElementServerController {
  private static Logger log = LoggerFactory.getLogger(TemplateInstanceServerController.class);

  private static TemplateInstanceService<String, JsonNode> templateInstanceService;
  protected static List<String> FIELD_NAMES_SUMMARY_LIST;

  static {
    FIELD_NAMES_SUMMARY_LIST = new ArrayList<String>();
    FIELD_NAMES_SUMMARY_LIST.add("@id");
    FIELD_NAMES_SUMMARY_LIST.add("info.template_description");
    FIELD_NAMES_SUMMARY_LIST.add("info.template_title");
    FIELD_NAMES_SUMMARY_LIST.add("info.creation_date");
  }

  public static void injectTemplateInstanceService(TemplateInstanceService<String, JsonNode> tis) {
    templateInstanceService = tis;
  }

  public static Result createTemplateInstance() {
    try {
      JsonNode templateInstance = request().body().asJson();
      JsonNode createdTemplateInstance = templateInstanceService.createTemplateInstanceLinkedData(templateInstance);
      // Remove autogenerated _id field to avoid exposing it
      createdTemplateInstance = JsonUtils.removeField(createdTemplateInstance, "_id");
      return ok(createdTemplateInstance);
    } catch (Exception e) {
      return internalServerError();
    }
  }

  public static Result findAllTemplateInstances(Integer count, Integer page, boolean summary) {
    try {
      Map<String, Object> r = new HashMap<>();
      List<JsonNode> templates = null;
      ServiceResponseObject serviceResponseObject = ServiceResponseObject.build();
      if (summary) {
        templates = templateInstanceService.findAllTemplateInstances(count, page, FIELD_NAMES_SUMMARY_LIST, FieldNameInEx.INCLUDE);
        serviceResponseObject.extra("fieldNames", FIELD_NAMES_SUMMARY_LIST);
      } else {
        templates = templateInstanceService.findAllTemplateInstances(count, page, FIELD_NAMES_EXCLUSION_LIST, FieldNameInEx.EXCLUDE);
      }
      long total = templateInstanceService.count();
      serviceResponseObject.request("count", count)
          .request("page", page)
          .request("summary", summary)
          .response("total", total)
          .response("count", templates.size())
          .data(templates);
      return ok(Json.toJson(serviceResponseObject.get()));
    } catch (Exception e) {
      return internalServerError();
    }
  }

  public static Result findTemplateInstance(String templateInstanceId) {
    try {
      JsonNode templateInstance = templateInstanceService.findTemplateInstanceByLinkedDataId(templateInstanceId);
      if (templateInstance != null) {
        // Remove autogenerated _id field to avoid exposing it
        templateInstance = JsonUtils.removeField(templateInstance, "_id");
        return ok(templateInstance);
      }
      return notFound();
    } catch (IllegalArgumentException e) {
      return badRequest();
    } catch (Exception e) {
      return internalServerError();
    }
  }

  public static Result updateTemplateInstance(String templateInstanceId) {
    JsonNode modifications = request().body().asJson();
    try {
      JsonNode updatedTemplateInstance = templateInstanceService.updateTemplateInstanceByLinkedDataId(templateInstanceId,
          modifications);
      // Remove autogenerated _id field to avoid exposing it
      updatedTemplateInstance = JsonUtils.removeField(updatedTemplateInstance, "_id");
      return ok(updatedTemplateInstance);
    } catch (IllegalArgumentException e) {
      return badRequest();
    } catch (InstanceNotFoundException e) {
      return notFound();
    } catch (Exception e) {
      return internalServerError();
    }
  }

  public static Result deleteTemplateInstance(String templateInstanceId) {
    try {
      templateInstanceService.deleteTemplateInstanceByLinkedDataId(templateInstanceId);
      return ok();
    } catch (IllegalArgumentException e) {
      return badRequest();
    } catch (InstanceNotFoundException e) {
      return notFound();
    } catch (Exception e) {
      return internalServerError();
    }
  }

}
